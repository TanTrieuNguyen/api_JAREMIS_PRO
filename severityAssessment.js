/**
 * SEVERITY ASSESSMENT & EMERGENCY GUIDANCE MODULE
 * ƒê√°nh gi√° m·ª©c ƒë·ªô nguy hi·ªÉm v√† h∆∞·ªõng d·∫´n x·ª≠ tr√≠ kh·∫©n c·∫•p
 */

// ========================================
// DATABASE B·ªÜNH NGUY HI·ªÇM (HIGH SEVERITY)
// ========================================
const CRITICAL_CONDITIONS = {
  // B·ªánh tim m·∫°ch c·∫•p t√≠nh
  'I21': { name: 'Nh·ªìi m√°u c∆° tim c·∫•p', mortality: 15, emergency: true, category: 'cardiac' },
  'I20.0': { name: 'ƒêau th·∫Øt ng·ª±c kh√¥ng ·ªïn ƒë·ªãnh', mortality: 12, emergency: true, category: 'cardiac' },
  'I26': { name: 'ThÊ†ì t·∫Øc ph·ªïi', mortality: 30, emergency: true, category: 'pulmonary' },
  'I60': { name: 'Xu·∫•t huy·∫øt d∆∞·ªõi nh·ªán', mortality: 45, emergency: true, category: 'neurological' },
  'I61': { name: 'Xu·∫•t huy·∫øt n√£o', mortality: 40, emergency: true, category: 'neurological' },
  'I63': { name: 'Nh·ªìi m√°u n√£o', mortality: 20, emergency: true, category: 'neurological' },
  
  // Nhi·ªÖm tr√πng n·∫∑ng
  'A41': { name: 'Nhi·ªÖm khu·∫©n huy·∫øt', mortality: 25, emergency: true, category: 'infectious' },
  'J18': { name: 'Vi√™m ph·ªïi n·∫∑ng', mortality: 15, emergency: true, category: 'pulmonary' },
  'K65': { name: 'Vi√™m ph√∫c m·∫°c', mortality: 20, emergency: true, category: 'abdominal' },
  'N17': { name: 'Suy th·∫≠n c·∫•p', mortality: 18, emergency: true, category: 'renal' },
  
  // Ch·∫•n th∆∞∆°ng n·∫∑ng
  'S06': { name: 'Ch·∫•n th∆∞∆°ng s·ªç n√£o', mortality: 30, emergency: true, category: 'trauma' },
  'S27': { name: 'Ch·∫•n th∆∞∆°ng ng·ª±c', mortality: 25, emergency: true, category: 'trauma' },
  'T79.4': { name: 'S·ªëc ch·∫•n th∆∞∆°ng', mortality: 35, emergency: true, category: 'trauma' },
  
  // R·ªëi lo·∫°n chuy·ªÉn h√≥a c·∫•p
  'E10.1': { name: 'Nhi·ªÖm toan ceton ƒë√°i th√°o ƒë∆∞·ªùng', mortality: 12, emergency: true, category: 'metabolic' },
  'E87.2': { name: 'Nhi·ªÖm toan chuy·ªÉn h√≥a', mortality: 15, emergency: true, category: 'metabolic' },
  
  // Ung th∆∞ giai ƒëo·∫°n mu·ªôn
  'C78': { name: 'Ung th∆∞ di cƒÉn', mortality: 60, emergency: false, category: 'oncology' },
  'C80': { name: 'Ung th∆∞ giai ƒëo·∫°n cu·ªëi', mortality: 70, emergency: false, category: 'oncology' },
};

// ========================================
// DATABASE B·ªÜNH TRUNG B√åNH (MODERATE SEVERITY)
// ========================================
const MODERATE_CONDITIONS = {
  'J44': { name: 'B·ªánh ph·ªïi t·∫Øc ngh·∫Ωn m·∫°n t√≠nh (COPD)', mortality: 8, emergency: false, category: 'pulmonary' },
  'I25': { name: 'B·ªánh tim m·∫°ch v√†nh m·∫°n t√≠nh', mortality: 6, emergency: false, category: 'cardiac' },
  'I50': { name: 'Suy tim', mortality: 9, emergency: false, category: 'cardiac' },
  'E11': { name: 'ƒê√°i th√°o ƒë∆∞·ªùng type 2', mortality: 5, emergency: false, category: 'metabolic' },
  'N18': { name: 'B·ªánh th·∫≠n m·∫°n t√≠nh', mortality: 7, emergency: false, category: 'renal' },
  'K29': { name: 'Vi√™m d·∫° d√†y', mortality: 1, emergency: false, category: 'gastrointestinal' },
  'A09': { name: 'Nhi·ªÖm tr√πng ti√™u h√≥a', mortality: 2, emergency: false, category: 'infectious' },
};

// ========================================
// DATABASE B·ªÜNH NH·∫∏ (LOW SEVERITY)
// ========================================
const MILD_CONDITIONS = {
  'J00': { name: 'C·∫£m l·∫°nh th√¥ng th∆∞·ªùng', mortality: 0.01, emergency: false, category: 'respiratory' },
  'J06': { name: 'Nhi·ªÖm tr√πng ƒë∆∞·ªùng h√¥ h·∫•p tr√™n c·∫•p', mortality: 0.1, emergency: false, category: 'respiratory' },
  'J11': { name: 'C√∫m m√πa', mortality: 0.5, emergency: false, category: 'respiratory' },
  'R51': { name: 'ƒêau ƒë·∫ßu', mortality: 0.01, emergency: false, category: 'neurological' },
  'R50': { name: 'S·ªët nh·∫π', mortality: 0.1, emergency: false, category: 'general' },
  'M79': { name: 'ƒêau c∆°', mortality: 0.01, emergency: false, category: 'musculoskeletal' },
  'K30': { name: 'Kh√≥ ti√™u', mortality: 0.01, emergency: false, category: 'gastrointestinal' },
  'R10': { name: 'ƒêau b·ª•ng nh·∫π', mortality: 0.1, emergency: false, category: 'gastrointestinal' },
  'H10': { name: 'Vi√™m k·∫øt m·∫°c', mortality: 0.01, emergency: false, category: 'ophthalmology' },
  'J02': { name: 'Vi√™m h·ªçng c·∫•p', mortality: 0.05, emergency: false, category: 'respiratory' },
  'G43': { name: 'ƒêau n·ª≠a ƒë·∫ßu (migraine)', mortality: 0.01, emergency: false, category: 'neurological' },
  'R53': { name: 'M·ªát m·ªèi', mortality: 0.01, emergency: false, category: 'general' },
  'F43': { name: 'Stress, lo √¢u', mortality: 0.5, emergency: false, category: 'mental' },
};

// ========================================
// RED FLAGS - D·∫§U HI·ªÜU NGUY HI·ªÇM C·∫¶N C·∫§P C·ª®U NGAY
// ========================================
const RED_FLAGS = [
  { symptom: 'ƒëau ng·ª±c d·ªØ d·ªôi', risk: 'Nh·ªìi m√°u c∆° tim, Thuy√™n t·∫Øc ph·ªïi', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'kh√≥ th·ªü n·∫∑ng', risk: 'Suy h√¥ h·∫•p, Hen n·∫∑ng, COVID-19 n·∫∑ng', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'li·ªát n·ª≠a ng∆∞·ªùi', risk: 'ƒê·ªôt qu·ªµ n√£o', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'n√≥i ng·ªçng ƒë·ªôt ng·ªôt', risk: 'ƒê·ªôt qu·ªµ n√£o', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'm·∫•t √Ω th·ª©c', risk: 'Nguy c∆° t·ª≠ vong cao', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'co gi·∫≠t', risk: 'ƒê·ªông kinh, Nhi·ªÖm tr√πng n√£o', action: 'üö® G·ªçi 115 NGAY' },
  { symptom: 'xu·∫•t huy·∫øt n·∫∑ng', risk: 'S·ªëc m·∫•t m√°u', action: 'üö® G·ªçi 115 + √âp v·∫øt th∆∞∆°ng NGAY' },
  { symptom: 'ƒëau b·ª•ng d·ªØ d·ªôi', risk: 'Vi√™m ru·ªôt th·ª´a, Th·ªßng t·∫°ng', action: 'üö® ƒê·∫øn ER ngay' },
  { symptom: 's·ªët tr√™n 40¬∞C', risk: 'Nhi·ªÖm tr√πng n·∫∑ng', action: 'üö® ƒê·∫øn ER ngay' },
  { symptom: 'SpO2 < 90%', risk: 'Suy h√¥ h·∫•p', action: 'üö® G·ªçi 115 + Th·ªü oxy NGAY' },
  { symptom: 'nh·ªãp tim > 140 ho·∫∑c < 40', risk: 'R·ªëi lo·∫°n nh·ªãp tim nguy hi·ªÉm', action: 'üö® G·ªçi 115 NGAY' },
];

// ========================================
// YELLOW FLAGS - D·∫§U HI·ªÜU C·∫¶N KH√ÅM B√ÅC Sƒ® TRONG 24H
// ========================================
const YELLOW_FLAGS = [
  { symptom: 's·ªët k√©o d√†i > 3 ng√†y', risk: 'Nhi·ªÖm tr√πng vi khu·∫©n', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'ƒëau ƒë·∫ßu d·ªØ d·ªôi dai d·∫≥ng', risk: '√Åp l·ª±c n·ªôi s·ªç tƒÉng', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'ho ra m√°u', risk: 'Lao ph·ªïi, Ung th∆∞ ph·ªïi', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'n√¥n ra m√°u', risk: 'Xu·∫•t huy·∫øt ti√™u h√≥a', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'ti·ªÉu ra m√°u', risk: 'Nhi·ªÖm tr√πng ti·∫øt ni·ªáu, S·ªèi th·∫≠n', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'ƒë√°i th√°o ƒë∆∞·ªùng m·∫•t ki·ªÉm so√°t', risk: 'Bi·∫øn ch·ª©ng c·∫•p t√≠nh', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
  { symptom: 'kh√≥ th·ªü nh·∫π k√©o d√†i', risk: 'Hen, COPD c·∫•p', action: '‚ö†Ô∏è Kh√°m b√°c sƒ© trong 24h' },
];

// ========================================
// ASSESSMENT FUNCTIONS
// ========================================

/**
 * ƒê√°nh gi√° m·ª©c ƒë·ªô nguy hi·ªÉm d·ª±a tr√™n ICD-10 codes
 */
function assessSeverity(icdCodes) {
  let maxMortality = 0;
  let isEmergency = false;
  let criticalConditions = [];
  let moderateConditions = [];
  let mildConditions = [];
  
  icdCodes.forEach(code => {
    // Ki·ªÉm tra t·ª´ng level
    if (CRITICAL_CONDITIONS[code]) {
      const condition = CRITICAL_CONDITIONS[code];
      criticalConditions.push(condition);
      maxMortality = Math.max(maxMortality, condition.mortality);
      isEmergency = isEmergency || condition.emergency;
    } else if (MODERATE_CONDITIONS[code]) {
      const condition = MODERATE_CONDITIONS[code];
      moderateConditions.push(condition);
      maxMortality = Math.max(maxMortality, condition.mortality);
    } else if (MILD_CONDITIONS[code]) {
      const condition = MILD_CONDITIONS[code];
      mildConditions.push(condition);
      maxMortality = Math.max(maxMortality, condition.mortality);
    }
  });
  
  // X√°c ƒë·ªãnh severity level
  let severityLevel = 'MILD';
  if (maxMortality >= 10 || isEmergency) {
    severityLevel = 'CRITICAL';
  } else if (maxMortality >= 5 || moderateConditions.length > 0) {
    severityLevel = 'MODERATE';
  }
  
  return {
    level: severityLevel,
    mortality: maxMortality,
    isEmergency,
    criticalConditions,
    moderateConditions,
    mildConditions
  };
}

/**
 * Ki·ªÉm tra red flags trong tri·ªáu ch·ª©ng
 */
function checkRedFlags(symptoms) {
  const detectedFlags = [];
  const symptomsLower = symptoms.toLowerCase();
  
  RED_FLAGS.forEach(flag => {
    if (symptomsLower.includes(flag.symptom)) {
      detectedFlags.push(flag);
    }
  });
  
  return detectedFlags;
}

/**
 * Ki·ªÉm tra yellow flags trong tri·ªáu ch·ª©ng
 */
function checkYellowFlags(symptoms) {
  const detectedFlags = [];
  const symptomsLower = symptoms.toLowerCase();
  
  YELLOW_FLAGS.forEach(flag => {
    if (symptomsLower.includes(flag.symptom)) {
      detectedFlags.push(flag);
    }
  });
  
  return detectedFlags;
}

/**
 * T·∫°o h∆∞·ªõng d·∫´n x·ª≠ tr√≠ kh·∫©n c·∫•p cho b·ªánh nguy hi·ªÉm
 */
function generateEmergencyGuidance(condition, symptoms) {
  const guidance = {
    alert: 'üö® C·∫¢NH B√ÅO: B·ªÜNH NGUY HI·ªÇM',
    mortality: `T·ª∑ l·ªá t·ª≠ vong: ${condition.mortality}%`,
    immediateActions: [],
    homeCareSurvival: [],
    whenToER: [],
    emergencyNumber: '‚òéÔ∏è G·ªçi c·∫•p c·ª©u: 115 (Vi·ªát Nam)',
  };
  
  // H∆∞·ªõng d·∫´n theo t·ª´ng lo·∫°i b·ªánh
  switch(condition.category) {
    case 'cardiac':
      guidance.immediateActions = [
        '‚úÖ G·ªçi 115 NGAY L·∫¨P T·ª®C',
        '‚úÖ Cho b·ªánh nh√¢n n·∫±m ngh·ªâ, ƒë·∫ßu cao 30¬∞',
        '‚úÖ N·∫øu c√≥ thu·ªëc ch·ªëng ƒëau ng·ª±c (Nitroglycerin): ƒë·∫∑t d∆∞·ªõi l∆∞·ª°i',
        '‚úÖ N·∫øu c√≥ Aspirin: nhai 300mg (kh√¥ng nu·ªët nguy√™n vi√™n)',
        '‚úÖ Theo d√µi nh·ªãp th·ªü, m·∫°ch',
        '‚ùå KH√îNG t·ª± l√°i xe ƒë·∫øn b·ªánh vi·ªán'
      ];
      guidance.homeCareSurvival = [
        '‚è∞ 12-48 gi·ªù ƒë·∫ßu l√† QUAN TR·ªåNG NH·∫§T',
        'üè• Ph·∫£i ƒë·∫øn b·ªánh vi·ªán c√≥ khoa C·∫•p c·ª©u Tim m·∫°ch',
        'üíä Kh√¥ng t·ª± √Ω d√πng thu·ªëc gi·∫£m ƒëau th√¥ng th∆∞·ªùng',
        'üö≠ Tuy·ªát ƒë·ªëi kh√¥ng h√∫t thu·ªëc, tr√°nh stress',
        'üìä Theo d√µi: ƒêau ng·ª±c tƒÉng? Kh√≥ th·ªü? V√£ m·ªì h√¥i?'
      ];
      guidance.whenToER = [
        'üö® ƒêau ng·ª±c lan ra tay, h√†m, l∆∞ng',
        'üö® Kh√≥ th·ªü, th·ªü nhanh',
        'üö® Bu·ªìn n√¥n, n√¥n m·ª≠a',
        'üö® Cho√°ng v√°ng, m·∫•t √Ω th·ª©c',
        'üö® Nh·ªãp tim kh√¥ng ƒë·ªÅu'
      ];
      break;
      
    case 'neurological':
      guidance.immediateActions = [
        '‚úÖ G·ªçi 115 NGAY L·∫¨P T·ª®C',
        '‚úÖ Nh·∫≠n di·ªán ƒë·ªôt qu·ªµ: F.A.S.T (Face-Arms-Speech-Time)',
        '‚úÖ Cho b·ªánh nh√¢n n·∫±m nghi√™ng (tr√°nh s·∫∑c)',
        '‚úÖ KH√îNG cho ƒÉn u·ªëng g√¨',
        '‚úÖ Ghi nh·ªõ th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu tri·ªáu ch·ª©ng (quan tr·ªçng!)',
        '‚ùå KH√îNG t·ª± l√°i xe'
      ];
      guidance.homeCareSurvival = [
        '‚è∞ 4.5 gi·ªù ƒë·∫ßu l√† "GOLDEN HOUR" - quy·∫øt ƒë·ªãnh s·ªëng c√≤n',
        'üè• Ph·∫£i ƒë·∫øn b·ªánh vi·ªán c√≥ khoa ƒê·ªôt qu·ªµ (Stroke Unit)',
        'üíä KH√îNG t·ª± √Ω d√πng thu·ªëc',
        'üìä Theo d√µi: Li·ªát tƒÉng? N√≥i kh√≥ h∆°n? √ù th·ª©c gi·∫£m?'
      ];
      guidance.whenToER = [
        'üö® Li·ªát n·ª≠a ng∆∞·ªùi (tay, ch√¢n, m·∫∑t)',
        'üö® N√≥i kh√≥, n√≥i l·∫Øp',
        'üö® M·∫Øt nh√¨n m·ªù ƒë·ªôt ng·ªôt',
        'üö® ƒêau ƒë·∫ßu d·ªØ d·ªôi ch∆∞a t·ª´ng c√≥',
        'üö® M·∫•t thƒÉng b·∫±ng, ch√≥ng m·∫∑t n·∫∑ng'
      ];
      break;
      
    case 'pulmonary':
      guidance.immediateActions = [
        '‚úÖ G·ªçi 115 NGAY',
        '‚úÖ Cho b·ªánh nh√¢n ng·ªìi d·∫≠y (d·ªÖ th·ªü h∆°n)',
        '‚úÖ N·∫øu c√≥ oxy: 4-6L/ph√∫t qua mask',
        '‚úÖ N·∫øu c√≥ thu·ªëc hen (Ventolin): 2-4 nh√°t',
        '‚úÖ M·ªü c·ª≠a s·ªï, th√¥ng gi√≥',
        '‚ùå KH√îNG cho n·∫±m ng·ª≠a ho√†n to√†n'
      ];
      guidance.homeCareSurvival = [
        '‚è∞ 6-24 gi·ªù ƒë·∫ßu theo d√µi s√°t',
        'üè• Ph·∫£i c√≥ m√°y ƒëo SpO2 t·∫°i nh√† (n·∫øu < 90% ‚Üí ƒëi ER ngay)',
        'üíä D√πng thu·ªëc gi√£n ph·∫ø qu·∫£n theo ch·ªâ ƒë·ªãnh',
        'üìä Theo d√µi: T·∫ßn s·ªë th·ªü, m√†u da, m√¥i t√≠m?'
      ];
      guidance.whenToER = [
        'üö® SpO2 < 90%',
        'üö® Th·ªü nhanh > 30 l·∫ßn/ph√∫t',
        'üö® M√¥i, m√≥ng tay t√≠m',
        'üö® N√≥i kh√¥ng th√†nh c√¢u',
        'üö® Cho√°ng v√°ng, l∆° m∆°'
      ];
      break;
      
    case 'infectious':
      guidance.immediateActions = [
        '‚úÖ G·ªçi 115 ho·∫∑c ƒë·∫øn ER ngay',
        '‚úÖ H·∫° s·ªët: ch∆∞·ªùm n∆∞·ªõc ·∫•m, u·ªëng Paracetamol',
        '‚úÖ U·ªëng nhi·ªÅu n∆∞·ªõc (2-3L/ng√†y)',
        '‚úÖ C√°ch ly n·∫øu nghi nhi·ªÖm tr√πng l√¢y',
        '‚úÖ Theo d√µi nhi·ªát ƒë·ªô m·ªói 2-4 gi·ªù'
      ];
      guidance.homeCareSurvival = [
        '‚è∞ 12-24 gi·ªù ƒë·∫ßu c·ª±c k·ª≥ quan tr·ªçng',
        'üè• C·∫ßn kh√°ng sinh tƒ©nh m·∫°ch s·ªõm (kh√¥ng t·ª± mua)',
        'üíä H·∫° s·ªët < 38.5¬∞C ƒë·ªÉ tr√°nh co gi·∫≠t',
        'üìä Theo d√µi: S·ªët gi·∫£m ch∆∞a? T·ªânh t√°o? N∆∞·ªõc ti·ªÉu ƒë·ªß?'
      ];
      guidance.whenToER = [
        'üö® S·ªët > 39.5¬∞C kh√¥ng h·∫°',
        'üö® Xu·∫•t huy·∫øt d∆∞·ªõi da (ch·∫•m t√≠m)',
        'üö® L∆° m∆°, m√™ s·∫£ng',
        'üö® N√¥n m·ª≠a li√™n t·ª•c',
        'üö® Ti·ªÉu √≠t ho·∫∑c kh√¥ng ti·ªÉu'
      ];
      break;
      
    default:
      guidance.immediateActions = [
        '‚úÖ G·ªçi 115 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n',
        '‚úÖ Theo d√µi tri·ªáu ch·ª©ng ch·∫∑t ch·∫Ω',
        '‚úÖ Chu·∫©n b·ªã ƒë·∫øn b·ªánh vi·ªán n·∫øu x·∫•u ƒëi',
        '‚úÖ Ghi ch√©p tri·ªáu ch·ª©ng, th·ªùi gian'
      ];
      guidance.whenToER = [
        'üö® Tri·ªáu ch·ª©ng x·∫•u ƒëi nhanh',
        'üö® ƒêau tƒÉng kh√¥ng ki·ªÉm so√°t',
        'üö® Xu·∫•t huy·∫øt b·∫•t th∆∞·ªùng',
        'üö® √ù th·ª©c gi·∫£m'
      ];
  }
  
  return guidance;
}

/**
 * T·∫°o h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã t·∫°i nh√† cho b·ªánh nh·∫π/trung b√¨nh
 */
function generateHomeCarGuidance(condition, symptoms) {
  const guidance = {
    alert: condition.mortality >= 5 ? '‚ö†Ô∏è B·ªÜNH TRUNG B√åNH - C·∫ßn theo d√µi' : '‚úÖ B·ªÜNH NH·∫∏ - C√≥ th·ªÉ ƒëi·ªÅu tr·ªã t·∫°i nh√†',
    homeCare: [],
    medications: [],
    followUp: [],
    whenToSeeDoctor: []
  };
  
  // H∆∞·ªõng d·∫´n theo category
  switch(condition.category) {
    case 'respiratory':
      guidance.homeCare = [
        'üè† Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß, tr√°nh m·ªát m·ªèi',
        'üíß U·ªëng nhi·ªÅu n∆∞·ªõc ·∫•m (2-3L/ng√†y)',
        'üå°Ô∏è H·∫° s·ªët n·∫øu > 38.5¬∞C',
        'üò∑ ƒêeo kh·∫©u trang khi ti·∫øp x√∫c ng∆∞·ªùi kh√°c',
        'ü™ü Gi·ªØ ph√≤ng th√¥ng tho√°ng'
      ];
      guidance.medications = [
        'üíä Paracetamol 500mg: U·ªëng khi s·ªët > 38.5¬∞C (3-4 l·∫ßn/ng√†y)',
        'üíä Vitamin C 1000mg: 1 vi√™n/ng√†y',
        'üçØ M·∫≠t ong + chanh ·∫•m: Gi·∫£m ho',
        'üíä X·ªãt m≈©i n∆∞·ªõc mu·ªëi sinh l√Ω: 3-4 l·∫ßn/ng√†y'
      ];
      guidance.followUp = [
        'üìÖ Theo d√µi: 3-5 ng√†y th∆∞·ªùng kh·ªèi',
        'üìä N·∫øu sau 5 ng√†y kh√¥ng kh·ªèi ‚Üí Kh√°m b√°c sƒ©',
        'üå°Ô∏è ƒêo nhi·ªát ƒë·ªô 2 l·∫ßn/ng√†y (s√°ng, t·ªëi)'
      ];
      guidance.whenToSeeDoctor = [
        '‚ö†Ô∏è S·ªët > 3 ng√†y',
        '‚ö†Ô∏è Kh√≥ th·ªü, th·ªü nhanh',
        '‚ö†Ô∏è ƒêau ng·ª±c khi th·ªü',
        '‚ö†Ô∏è Ho ra ƒë·ªùm m·ªß, m√°u',
        '‚ö†Ô∏è Tri·ªáu ch·ª©ng kh√¥ng gi·∫£m sau 5 ng√†y'
      ];
      break;
      
    case 'gastrointestinal':
      guidance.homeCare = [
        'üçö ƒÇn nh·∫°t, d·ªÖ ti√™u (ch√°o, s√∫p)',
        'üíß B√π n∆∞·ªõc ƒëi·ªán gi·∫£i (Oresol)',
        'üö´ Tr√°nh: Cay, d·∫ßu m·ª°, c√† ph√™, r∆∞·ª£u',
        'üçµ U·ªëng tr√† g·ª´ng, tr√† b·∫°c h√†',
        'üò¥ Ng·ªß ƒë·ªß gi·∫•c'
      ];
      guidance.medications = [
        'üíä Smecta: 1 g√≥i x 3 l·∫ßn/ng√†y (ti√™u ch·∫£y)',
        'üíä Omeprazole 20mg: 1 vi√™n bu·ªïi s√°ng ƒë√≥i (vi√™m d·∫° d√†y)',
        'üíä Men ti√™u h√≥a: Theo h∆∞·ªõng d·∫´n',
        '‚ö†Ô∏è Kh√¥ng d√πng kh√°ng sinh t·ª± √Ω'
      ];
      guidance.followUp = [
        'üìÖ Th∆∞·ªùng kh·ªèi trong 2-3 ng√†y',
        'üìä N·∫øu sau 3 ng√†y kh√¥ng kh·ªèi ‚Üí Kh√°m b√°c sƒ©'
      ];
      guidance.whenToSeeDoctor = [
        '‚ö†Ô∏è Ti√™u ch·∫£y > 3 ng√†y',
        '‚ö†Ô∏è N√¥n ra m√°u, ƒëi c·∫ßu ph√¢n ƒëen',
        '‚ö†Ô∏è ƒêau b·ª•ng d·ªØ d·ªôi',
        '‚ö†Ô∏è S·ªët cao k√®m ti√™u ch·∫£y',
        '‚ö†Ô∏è D·∫•u hi·ªáu m·∫•t n∆∞·ªõc: Kh√°t n∆∞·ªõc, ti·ªÉu √≠t, m·ªát l·∫£'
      ];
      break;
      
    case 'neurological':
      if (condition.name.includes('ƒëau ƒë·∫ßu') || condition.name.includes('migraine')) {
        guidance.homeCare = [
          'üò¥ Ngh·ªâ ng∆°i trong ph√≤ng t·ªëi, y√™n tƒ©nh',
          '‚ùÑÔ∏è Ch∆∞·ªùm l·∫°nh tr√°n, g√°y',
          '‚òï U·ªëng c√† ph√™ (migraine)',
          'üßò Th∆∞ gi√£n, tr√°nh stress',
          'üí§ Ng·ªß ƒë·ªß 7-8 gi·ªù/ƒë√™m'
        ];
        guidance.medications = [
          'üíä Paracetamol 500mg: 1-2 vi√™n khi ƒëau',
          'üíä Ibuprofen 400mg: 1 vi√™n khi ƒëau (n·∫øu Paracetamol kh√¥ng ƒë·ªß)',
          '‚ö†Ô∏è Kh√¥ng d√πng > 3 ng√†y li√™n t·ª•c'
        ];
        guidance.whenToSeeDoctor = [
          '‚ö†Ô∏è ƒêau ƒë·∫ßu d·ªØ d·ªôi nh·∫•t ƒë·ªùi (thunderclap headache)',
          '‚ö†Ô∏è ƒêau ƒë·∫ßu k√®m s·ªët, c·ª©ng g√°y',
          '‚ö†Ô∏è ƒêau ƒë·∫ßu k√®m n√¥n √≥i phun',
          '‚ö†Ô∏è ƒêau ƒë·∫ßu k√®m nh√¨n m·ªù, li·ªát',
          '‚ö†Ô∏è ƒêau ƒë·∫ßu m·ªõi xu·∫•t hi·ªán sau 50 tu·ªïi'
        ];
      }
      break;
      
    default:
      guidance.homeCare = [
        'üè† Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß',
        'üíß U·ªëng nhi·ªÅu n∆∞·ªõc',
        'üçé ƒÇn u·ªëng dinh d∆∞·ª°ng',
        'üò¥ Ng·ªß ƒë·ªß gi·∫•c',
        'üìä Theo d√µi tri·ªáu ch·ª©ng'
      ];
      guidance.whenToSeeDoctor = [
        '‚ö†Ô∏è Tri·ªáu ch·ª©ng kh√¥ng gi·∫£m sau 3-5 ng√†y',
        '‚ö†Ô∏è Xu·∫•t hi·ªán tri·ªáu ch·ª©ng m·ªõi',
        '‚ö†Ô∏è Tri·ªáu ch·ª©ng x·∫•u ƒëi'
      ];
  }
  
  return guidance;
}

module.exports = {
  assessSeverity,
  checkRedFlags,
  checkYellowFlags,
  generateEmergencyGuidance,
  generateHomeCarGuidance,
  CRITICAL_CONDITIONS,
  MODERATE_CONDITIONS,
  MILD_CONDITIONS,
  RED_FLAGS,
  YELLOW_FLAGS
};
